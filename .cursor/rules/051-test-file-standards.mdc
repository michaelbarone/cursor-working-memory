---
description: Apply testing framework standards and reuse existing patterns when creating or editing test files
globs: **/*.test.{ts,tsx,js,jsx}
alwaysApply: true
---

# Test File Standards

## Context
- Applies to all test files (unit, integration, e2e)
- References testing framework documentation in `/docs/features/testing-framework`
- Promotes reuse of existing test patterns
- Works with existing testing rules (051-vitest-react-testing-lib-testing-standards.mdc, 053-playwright-e2e-standards.mdc)
- Integrates with performance monitoring standards from 055-test-debugging-standards.mdc

## Requirements
- Before creating/editing test files:
  1. Review `/docs/features/testing-framework` documentation
  2. Search for similar existing tests to reuse patterns
  3. Follow error handling patterns from `error-handling-patterns.md`
  4. Use test data management practices from `test-data-management.md`
  5. Reference troubleshooting guide for common issues
  6. Implement performance monitoring using `measureTestTime`

## Critical Rules
- ALWAYS check `/docs/features/testing-framework` first
- NEVER duplicate existing test patterns - reuse them
- ALWAYS follow error handling patterns from documentation
- ALWAYS use standard mock implementations
- ALWAYS include performance monitoring for test operations
- Keep tests focused and isolated
- Follow naming conventions from existing tests
- Document complex test scenarios
- ALWAYS run the test BEFORE editing to establish a baseline
- ALWAYS run the test after you are done editing to ensure passing tests

## Test Structure Standards

1. Import Organization:
   ```typescript
   // 1. External imports
   import { describe, test, expect, vi } from "vitest";
   import { NextRequest } from "next/server";

   // 2. Testing utilities
   import { measureTestTime, THRESHOLDS } from "@/test/utils/performance";
   import { debugResponse } from "@/test/utils/debug";

   // 3. Internal imports
   import { mockVerifyToken } from "@/test/utils/mocks/auth-mock";
   import { createTestFile } from "@/test/utils/mocks/file-mock";

   // 4. Test subject import
   import { POST, DELETE } from "./route";
   ```

2. Mock Setup:
   ```typescript
   // 1. Define mock types
   type MockType = {
     id: string;
     // ... other fields
   };

   // 2. Create mock functions with timing
   const mockFn = vi.fn().mockImplementation(async () => {
     const timer = measureTestTime('mockFn');
     try {
       return Promise.resolve<MockType>({ id: "test" });
     } finally {
       timer.end();
     }
   });

   // 3. Mock external modules
   vi.mock("@/app/lib/module", () => ({
     someFunction: mockFn,
   }));
   ```

3. Test Organization:
   ```typescript
   describe("Feature Name", () => {
     const suiteTimer = measureTestTime('Feature Suite');

     // 1. Setup/teardown
     beforeEach(() => {
       vi.clearAllMocks();
     });

     afterAll(() => {
       suiteTimer.end();
     });

     // 2. Happy path tests
     test("successfully performs action", async () => {
       const testTimer = measureTestTime('successful action test');
       try {
         // Arrange
         const data = { id: "test" };

         // Act
         const actionTimer = measureTestTime('perform action');
         const result = await performAction(data);
         expect(actionTimer.elapsed()).toBeLessThan(THRESHOLDS.UNIT);
         actionTimer.end();

         // Assert
         expect(result).toBeDefined();
       } finally {
         testTimer.end();
       }
     });

     // 3. Error cases
     test("handles error condition", async () => {
       const testTimer = measureTestTime('error handling test');
       try {
         // Arrange
         mockFn.mockRejectedValueOnce(new Error("Test error"));

         // Act & Assert
         const actionTimer = measureTestTime('error action');
         try {
           await performAction();
         } catch (error) {
           expect(actionTimer.elapsed()).toBeLessThan(THRESHOLDS.UNIT);
           expect(error.message).toBe("Test error");
         }
         actionTimer.end();
       } finally {
         testTimer.end();
       }
     });
   });
   ```

## Performance Standards

1. Test Timing Requirements:
   ```typescript
   // Define thresholds based on test type
   export const THRESHOLDS = {
     UNIT: 100,      // 100ms
     INTEGRATION: 1000, // 1 second
     E2E: 5000,      // 5 seconds
     API: 2000       // 2 seconds
   } as const;

   // Apply thresholds in tests
   test("performs within time limit", async () => {
     const timer = measureTestTime('operation');
     try {
       await operation();
       expect(timer.elapsed()).toBeLessThan(THRESHOLDS.UNIT);
     } finally {
       timer.end();
     }
   });
   ```

2. Performance Monitoring Guidelines:
   - Measure all significant operations
   - Track suite-level timing
   - Monitor mock execution time
   - Log performance metrics on failure
   - Use appropriate thresholds
   - Clean up timers in finally blocks

## Examples

<example>
// Good: Following standards with performance monitoring
import { describe, test, expect, vi } from "vitest";
import { measureTestTime, THRESHOLDS } from "@/test/utils/performance";
import { mockVerifyToken } from "@/test/utils/mocks/auth-mock";
import { createTestFile } from "@/test/utils/mocks/file-mock";
import { POST } from "./route";

type ConfigMock = {
  id: string;
  value: string;
};

const mockUpsert = vi.fn().mockImplementation(async () => {
  const timer = measureTestTime('mockUpsert');
  try {
    return Promise.resolve<ConfigMock>({ id: "test", value: "test" });
  } finally {
    timer.end();
  }
});

vi.mock("@/app/lib/db/prisma", () => ({
  prisma: {
    config: {
      upsert: mockUpsert,
    },
  },
}));

describe("Config API", () => {
  const suiteTimer = measureTestTime('Config API Suite');

  beforeEach(() => {
    vi.clearAllMocks();
    mockVerifyToken.mockResolvedValue({ isAdmin: true });
  });

  afterAll(() => {
    suiteTimer.end();
  });

  test("successfully updates config", async () => {
    const testTimer = measureTestTime('config update test');
    try {
      const response = await POST(new Request("http://test"));
      expect(response.status).toBe(200);
      expect(testTimer.elapsed()).toBeLessThan(THRESHOLDS.API);
    } finally {
      testTimer.end();
    }
  });

  test("handles unauthorized access", async () => {
    const testTimer = measureTestTime('unauthorized test');
    try {
      mockVerifyToken.mockResolvedValue(null);
      const response = await POST(new Request("http://test"));
      expect(response.status).toBe(401);
      expect(testTimer.elapsed()).toBeLessThan(THRESHOLDS.UNIT);
    } finally {
      testTimer.end();
    }
  });
});
</example>

<example type="invalid">
// Bad: Not following standards or performance monitoring
import { test } from "vitest";

// Missing proper mock setup and performance tracking
const mockDb = {
  save: () => Promise.resolve(),
};

test("config test", async () => {
  // No describe block
  // No error handling
  // No pattern reuse
  // No performance monitoring
  const result = await saveConfig();
  expect(result).toBe(true);
});
</example>

## Dependencies
- 051-vitest-react-testing-lib-testing-standards.mdc
- 053-playwright-e2e-standards.mdc
- 054-test-data-management.mdc
- 055-test-debugging-standards.mdc
- 057-test-performance-standards.mdc

metadata:
  priority: high
  version: 1.1.0
  tags:
    - testing
    - standards
    - patterns
    - performance
